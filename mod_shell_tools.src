MODULE mod_shell_tools

 USE prec, ONLY: fp
 USE mx_limits, ONLY: MXSH, MXGTOT, MXATM, MXAO
 USE mod_nosp_basis, ONLY: basis_set, nosp_basis

 TYPE shell_t
     !INTEGER :: shid, atid, ig1, ig2, ang, minbf, maxbf, locao, nao
     INTEGER :: shid       !< shell ID in a basis set
     INTEGER :: atid       !< ID of the corresponding atom
     INTEGER :: ig1        !< index of the first primitive of the shell in total basis set
     INTEGER :: ig2        !< index of the last primitive of the shell in total basis set
     INTEGER :: ang        !< angular momentum + 1
     INTEGER :: locao      !< position of shell's first basis function in the basis set
     INTEGER :: nao        !< number of basis functions (atomic orbitals) in shell
     REAL(KIND=fp) :: r(3) !< shell origin
     CONTAINS
     PROCEDURE :: fetch_by_id => bas_set_indices
 END TYPE

!< @brief Data structure to hold data of primitive shell pair
 TYPE primpair_t
    REAL(KIND=fp) :: r(3)      !< center of charge coordinates
    REAL(KIND=fp) :: pad1
    REAL(KIND=fp) :: aa        !< sum of exponents
    REAL(KIND=fp) :: aa1       !< reverse sum of exponents
    REAL(KIND=fp) :: ai        !< exponent of the first shell
    REAL(KIND=fp) :: aj        !< exponent of the second shell
    REAL(KIND=fp) :: expfac    !< exponential prefactor
 END TYPE

!< @brief Data structure to hold data of contracted shell pair
!   I think AoS for primitive pairs would be OK as the only computationally
!   intensive part involving primitive pairs formation is not the limiting step.
!   There is small benefit in vectorizing 1e integrals: most of them are in fact
!   memory bandwidth limited, so it is better to focus on smaller CPU cache footprint.
 TYPE shpair_t
    REAL(KIND=fp) :: ri(3)              !< coordinates of the first shell
    REAL(KIND=fp) :: pad1
    REAL(KIND=fp) :: rj(3)              !< coordinates of the second shell
    REAL(KIND=fp) :: pad2
    INTEGER :: iang                     !< angular momentum of the first shell
    INTEGER :: jang                     !< angular momentum of the second shell
    INTEGER :: inao                     !< number of B.F. in the first shell
    INTEGER :: jnao                     !< number of B.F. in the second shell
    INTEGER :: isder                    !< `isder/=0` if derivatives are computed
    INTEGER :: numpairs                 !< number of primitives in shell pair block
    LOGICAL :: iandj                    !< true if first shell is same to second one
    TYPE(primpair_t), ALLOCATABLE :: p(:) !< array of primitive pairs data
!dir$ attributes align : 64 :: p
    CONTAINS
    PROCEDURE :: alloc => shell_pair_alloc
    PROCEDURE :: shell_pair
 END TYPE

 PRIVATE

 PUBLIC shell_t
 PUBLIC shpair_t

! PUBLIC shell_pair
! PUBLIC shell_pair_alloc
! PUBLIC bas_set_indices

CONTAINS

!> @brief Copy shell info from basis set to shell_t variable
!> @param[in]  shid     index of shell in a basis set
!> @param[out] shinfo   shell data
!
!> @author   Vladimir Mironov
!
!     REVISION HISTORY:
!> @date _Sep, 2018_ Initial release
!
 SUBROUTINE bas_set_indices(shinfo, shid)
!dir$ attributes inline :: bas_set_indices
    INTEGER, INTENT(IN) :: shid
    CLASS(shell_t), INTENT(INOUT) :: shinfo

    COMMON /INFOA / nat,ich,mul,num,nqmt,ne,na,nb, &
                    zan(MXATM),c(3,MXATM),ian(MXATM)
      INTEGER :: nat,ich,mul,num,nqmt,ne,na,nb,ian
      REAL(KIND=fp) :: zan,c

    shinfo%shid  = shid
    shinfo%atid  = nosp_basis%katom(shid)
    shinfo%ig1   = nosp_basis%kstart(shid)
    shinfo%ig2   = nosp_basis%kstart(shid)+nosp_basis%kng(shid)-1
    shinfo%ang   = nosp_basis%ktype(shid)
    shinfo%locao = nosp_basis%kloc(shid)
    shinfo%nao   = nosp_basis%kmax(shid)-nosp_basis%kmin(shid)+1
    shinfo%r     = c(:,shinfo%atid)

 END SUBROUTINE bas_set_indices

!--------------------------------------------------------------------------------

!> @brief Allocate shell pair array of primitives
!> @param[out] sp     shell pair data
!
!> @author   Vladimir Mironov
!
!     REVISION HISTORY:
!> @date _Oct, 2018_ Initial release
!
 SUBROUTINE shell_pair_alloc(sp)
    CLASS(shpair_t), INTENT(INOUT) :: sp

    IF(allocated(sp%p).AND.ubound(sp%p,1)<nosp_basis%mxcontr**2) DEALLOCATE(sp%p)

    IF (.NOT.allocated(sp%p)) ALLOCATE(sp%p(nosp_basis%mxcontr**2))

 END SUBROUTINE

!--------------------------------------------------------------------------------

!> @brief Generate data for pairwise electronic distributions
!> @param[in]  shi      index of the first shell in a basis set
!> @param[in]  shj      index of the second shell in a basis set
!> @param[in]  tol      cut-off for integrals
!> @param[out] pair     shell pair data
!> @param[in]  dup      [optional] if `.true.` - multiply prefactors by 2 when `shi==shj`
!
!> @author   Vladimir Mironov
!
!     REVISION HISTORY:
!> @date _Oct, 2018_ Initial release
!
 SUBROUTINE shell_pair(pair, shi, shj, tol, dup)
!dir$ attributes inline :: shell_pair
    CLASS(shpair_t), INTENT(INOUT) :: pair
    TYPE(shell_t), INTENT(IN) :: shi, shj
    REAL(KIND=fp), INTENT(IN) :: tol
    LOGICAL, INTENT(IN), OPTIONAL :: dup

    REAL(KIND=fp) :: rr, cci, ccj, aa, fac, ai, aj
    INTEGER :: ig, jg, jgmax, ij
    LOGICAL :: iandj, duplicate
    duplicate = .TRUE.
    if (present(dup)) duplicate = dup

    rr = sum( (shi%r-shj%r)**2 )

    pair%ri = shi%r
    pair%rj = shj%r

    iandj = shi%shid==shj%shid
    pair%iandj = iandj
    iandj = iandj.AND.duplicate

    pair%iang = shi%ang
    pair%jang = shj%ang

    pair%inao = shi%nao
    pair%jnao = shj%nao

!   I primitive
    ij = 0
    jgmax = shj%ig2
    DO ig = shi%ig1, shi%ig2

        ai = nosp_basis%ex(ig)
        cci = nosp_basis%cc(ig)

!       J primitive
        IF (iandj) jgmax = ig
        DO jg = shj%ig1, jgmax

            aj = nosp_basis%ex(jg)
            ccj = nosp_basis%cc(jg)

            aa = ai+aj

            IF (ai*aj*rr > tol*aa) CYCLE

            ij = ij + 1

            ASSOCIATE (pp => pair%p(ij))
                pp%ai = ai
                pp%aj = aj

                pp%aa = aa
                pp%aa1 = 1/aa

                pp%r = (ai*pair%ri + aj*pair%rj) * pp%aa1

                fac = cci*ccj*exp(-ai*aj*pp%aa1*rr)
                pp%expfac = fac
                IF (iandj) pp%expfac = 2*fac
            END ASSOCIATE

        END DO
        IF (iandj) pair%p(ij)%expfac = fac
    END DO

    pair%numpairs = ij

 END SUBROUTINE

!--------------------------------------------------------------------------------
END MODULE
