!> @author  Vladimir Mironov
!
!> @brief This module contains code to compute 1-electron integrals
!>  derivatives for FMO method.
!
!> @note all subroutines in this file uses SP-free basis set which can
!>  be prepared simply with call to `SPLIT_SP_BASIS` from `MOD_NOSP_BASIS` module
!>  All low-level 1e-integral subroutines were moved to `MOD_1E_PRIMITIVES` module
!
!  REVISION HISTORY:
!> @date _Sep, 2018_ Initial release
!
MODULE omp_fmogrd1

    USE prec, ONLY: fp
    USE mx_limits, ONLY: MXSH, MXGTOT, MXATM, MXAO, MAXSH
    USE mod_nosp_basis, ONLY: basis_set, nosp_basis, &
            !split_sp_basis, &
            bas_norm_matrix, bas_denorm_matrix
    USE mod_1e_primitives, ONLY: &
        comp_kinetic_der1, comp_coulomb_der1, comp_coulomb_helfeyder1, &
        density_ordered, density_unordered

    USE mod_shell_tools, ONLY: &
        shell_t, shpair_t

    USE mod_gauss_hermite, ONLY: prepQuadGaussHermite
    IMPLICIT NONE

    REAL(KIND=fp), PARAMETER :: ZERO  = 0.0D+00                 !< floating point zero
    REAL(KIND=fp), PARAMETER :: RLN10 = 2.30258D+00             !< \f$ ln(10) \f$
    REAL(KIND=fp), PARAMETER :: PI    = 3.14159265358979324_fp  !< \f$ \Pi \f$ constant
    REAL(KIND=fp), PARAMETER :: TWOPI = 6.28318530717958648_fp  !< \f$ 2\cdot\Pi \f$ constant
    REAL(KIND=fp), PARAMETER :: PI212 = 1.12837916709551257_fp  !< \f$ 2\cdot\Pi^{-1/2} \f$

    REAL(KIND=fp), PARAMETER :: &
        DEBUG  = transfer('DEBUG   ',1.0_fp), &
        GRD1   = transfer('GRD1    ',1.0_fp), &
        RESC   = transfer('RESC    ',1.0_fp), &
        ANESC  = transfer('NESC    ',1.0_fp)

    PRIVATE
    PUBLIC omp_esvder
    PUBLIC omp_exthelfey

CONTAINS

!-------------------------------------------------------------------------------

!> @brief Basis function derivative contributions to gradient
!> @details Compute derivative integrals of type <ii'|h|jj> = <ii'|t+v|jj>
!> @note No relativistic methods available
!> @note I'm absolutely unaware what `FMODEX` and `FMODEXX` arrays are for. Someone
!>  should update their description.
!
!> @author Vladimir Mironov
!
!   REVISION HISTORY:
!> @date _Sep, 2018_ Initial release
!>
!> @param[in]       idax    scaling factor for `FMODEX`
!> @param[in]       idaxx   scaling factor for `FMODEXX`
!> @param[in,out]   denab   density matrix in packed format, remains unchanged on return
!> @param[in]       l2      dimension of density matrix array
!> @param[in,out]   fmodex  array with gradient contribution scaled by `IDAX`
!> @param[in,out]   fmodexx array with gradient contribution scaled by `IDAXX`
!> @param[in]       lcphf   flag for CPHF calculation
 SUBROUTINE omp_esvder(idax,idaxx,denab,l2,fmodex,fmodexx,lcphf)

    INTEGER, PARAMETER :: mxchrm = 1

    REAL(KIND=fp), PARAMETER :: &
        DBUGME = transfer('TVDER   ',1.0_fp)

    REAL(KIND=fp), INTENT(INOUT) :: denab(:)
    INTEGER, INTENT(IN) :: l2, idax, idaxx
    LOGICAL, INTENT(IN) :: lcphf
    REAL(KIND=fp), INTENT(INOUT) :: fmodex(3,*), fmodexx(3,*)

    COMMON /CHMGMS/ xchm(MXCHRM),ychm(MXCHRM),zchm(MXCHRM), &
                    dxelmm(MXCHRM),dyelmm(MXCHRM),dzelmm(MXCHRM), &
                    qchm(MXCHRM),nchmat,kchrmm
        REAL(KIND=fp) :: xchm,ychm,zchm,dxelmm,dyelmm,dzelmm,qchm
        INTEGER :: nchmat,kchrmm

    COMMON /FMCOM / x(1)
      REAL(KIND=fp) :: x

    COMMON /FMOINF/ nfg,nlayer,natfmo,nbdfg,naotyp,nbody
      INTEGER :: nfg,nlayer,natfmo,nbdfg,naotyp,nbody

    COMMON /FMOPMD/ fmobox(3),mdwpbc,nimgcell,imglvl, &
                    ltrvec,lfmogctr,lfmoctmp,lindatmd,lwrkdsav,lindxiu, &
                    ipbcfst
        REAL(KIND=fp) :: fmobox
        INTEGER :: mdwpbc,nimgcell,imglvl,ltrvec,lfmogctr,lfmoctmp, &
            lindatmd,lwrkdsav,lindxiu,ipbcfst

    COMMON /FMOPNT/ lichfg,lmulfg,lidmrec,lfrgnam,llayfrg,lindat, &
                    lncbs,lfmozan,lfmoc,lfmomas,lizbas,liaglob,libdgh, &
                    liabdfg,ljabdfg,lncao,lidxcao,liaprjo,ljaprjo, &
                    lcoreao,locccor,lshiftb,liodfmo,lfmoda,lfmodb, &
                    lfmoespa,lfmoespb,llocfmo,lscffrg,lfmoscf,lrij, &
                    lpopmul,lpopmat,lialoc,lindbd,liatfrg,lindfrg, &
                    lindgfrg,lnatfrg,lnat0frg,lianfrg,lzanfrg,lcfrg, &
                    llibish,llibnsh,llibng,lindatg,lfmobuf(3),lfmode, &
                    lnumfrg,lloctat,liaoglob,lloadm,lfmoge,ldgrid, &
                    liodcfmo,ljob2grp,lfmopg,lemocdr,luntxyz,luntrot, &
                    lstonep,lmapsu,lfrgmul,lclmo,lialmo,lindlmo, &
                    latclmo,llmobdf,lfgflmo,lnfglmo,llfglmo,lpfglmo, &
                    lpopdmat,lidmpnt,liddpnt,livmpnt,liactfg,lcrfrg, &
                    lzlmfrgv,lylmfrgv,lndtfrg,lf_mm,lg_mm,lmaxl30
      INTEGER :: lichfg,lmulfg,lidmrec,lfrgnam,llayfrg,lindat, &
          lncbs,lfmozan,lfmoc,lfmomas,lizbas,liaglob,libdgh, &
          liabdfg,ljabdfg,lncao,lidxcao,liaprjo,ljaprjo, &
          lcoreao,locccor,lshiftb,liodfmo,lfmoda,lfmodb, &
          lfmoespa,lfmoespb,llocfmo,lscffrg,lfmoscf,lrij, &
          lpopmul,lpopmat,lialoc,lindbd,liatfrg,lindfrg, &
          lindgfrg,lnatfrg,lnat0frg,lianfrg,lzanfrg,lcfrg, &
          llibish,llibnsh,llibng,lindatg,lfmobuf,lfmode, &
          lnumfrg,lloctat,liaoglob,lloadm,lfmoge,ldgrid, &
          liodcfmo,ljob2grp,lfmopg,lemocdr,luntxyz,luntrot, &
          lstonep,lmapsu,lfrgmul,lclmo,lialmo,lindlmo, &
          latclmo,llmobdf,lfgflmo,lnfglmo,llfglmo,lpfglmo, &
          lpopdmat,lidmpnt,liddpnt,livmpnt,liactfg,lcrfrg, &
          lzlmfrgv,lylmfrgv,lndtfrg,lf_mm,lg_mm,lmaxl30

    COMMON /FMORUN/ espscf,e0scf(2),emp2s,idafmo,icurfg,jcurfg,kcurfg, &
                    icurlay,icurunt,nat1e,ncursh,ngau,icurpop,ifmostp, &
                    moncor,needr,modrst,norbproj,nunesp,iskipesp, &
                    iesdppc,idoprop,mp2run,icurit,idmfmo,iddfmo, &
                    iddcur,nddleft,ivmfmo,nzmtfmo,ifmobas,itmfmo(2)
      REAL(KIND=fp) :: espscf,e0scf,emp2s
      INTEGER :: idafmo,icurfg,jcurfg,kcurfg, &
          icurlay,icurunt,nat1e,ncursh,ngau,icurpop,ifmostp, &
          moncor,needr,modrst,norbproj,nunesp,iskipesp, &
          iesdppc,idoprop,mp2run,icurit,idmfmo,iddfmo, &
          iddcur,nddleft,ivmfmo,nzmtfmo,ifmobas,itmfmo

    COMMON /GRAD  / de(3,MXATM)
        REAL(KIND=fp) :: de
!$omp threadprivate(/GRAD  /)

    COMMON /INFOA / nat,ich,mul,num,nqmt,ne,na,nb, &
                    zan(mxatm),c(3,mxatm),ian(mxatm)
      INTEGER :: nat,ich,mul,num,nqmt,ne,na,nb,ian
      REAL(KIND=fp) :: zan,c

    COMMON /IOFILE/ ir,iw,ip,ijk,ipk,idaf,nav,ioda(950)
      INTEGER :: ir,iw,ip,ijk,ipk,idaf,nav,ioda

    COMMON /OUTPUT/ nprint,itol,icut,normf,normp,nopk
      INTEGER :: nprint,itol,icut,normf,normp,nopk

    COMMON /PAR   / me,master,nproc,ibtyp,iptim,goparr,dskwrk,maswrk
      INTEGER :: me,master,nproc,ibtyp,iptim
      LOGICAL :: goparr,dskwrk,maswrk

    COMMON /RUNOPT/ runtyp,exetyp,nevals,nglevl,nhlevl
      REAL(KIND=fp) :: runtyp,exetyp
      INTEGER :: nevals,nglevl,nhlevl

    COMMON /ROOT  / xx,u(13),w(13),nroots
      REAL(KIND=fp) :: xx,u,w
      INTEGER :: nroots
!$omp threadprivate(/ROOT  /)

    INTEGER :: &
        iaz, ipcount, next, mine, maxic, lfvesp, needfv, &
        nqmmatm, ii, jj, ic, icind, kfg

    REAL(KIND=fp) :: &
        tol, dum, fracv, fracesp, &
        znuc, daxv, dax, daxx, daxesp, daxxv, daxxesp, cxyz(3)

    REAL(KIND=fp) :: de1(3), fmodex1(3), fmodexx1(3)

    REAL(KIND=fp) :: dij(225), dernuc(3)
!dir$ attributes align : 64 :: dij, dernuc, de1, fmodex1, fmodexx1
    LOGICAL :: out, dbg, norm, nxt, fastvesp

    TYPE(shell_t) :: shi, shj
    TYPE(shpair_t) :: cntp

    REAL(KIND=fp), ALLOCATABLE :: de_priv(:,:), de_fmox(:,:), de_fmoxx(:,:)
!dir$ attributes align : 64 :: de_priv, de_fmox, de_fmoxx
    INTEGER :: l1

    dbg = (exetyp==DEBUG .OR. exetyp==DBUGME) .AND. maswrk
    out = (exetyp==DEBUG .OR. exetyp==DBUGME .OR. exetyp==GRD1 .OR. nprint==-3)

    IF (dbg) WRITE(iw,'(/10X,38(1H-)/10X,"GRADIENT INCLUDING AO DERIVATIVE TERMS"/10X,38(1H-))')

    iaz = 0

    dax  = REAL(idax,  KIND=fp)
    daxx = REAL(idaxx, KIND=fp)

    !IF (maswrk) write(iw,'("OMP FMO 1E GRD",2I10, 2F5.1, L10,/,3I10)') idax, idaxx, dax, daxx, lcphf, nosp_basis%nshell, natfmo, l2

    tol = RLN10*itol
    norm = normf /= 1 .OR. normp /= 1

    IF     (ifmostp==2) THEN
    ELSEIF (ifmostp==4) THEN
    ELSEIF (ifmostp==9) THEN
    ELSE
      WRITE (6,*) 'IFMOSTP MUST BE 2, 4, OR 9'
      CALL abrt
    END IF

    CALL prepQuadGaussHermite
!    CALL split_sp_basis

    IF (norm) THEN
        l1 = floor(sqrt(2.0*l2))
        CALL bas_norm_matrix(denab, nosp_basis%bfnrm, l1)
    END IF

!   Initialize parallel
    nxt = ibtyp==1
    ipcount = me - 1
    next = -1
    mine = -1

!   `D*ELMM` contains contribution to the forces on the
!   external charges which are due to QM molecule.
    IF (nchmat/=0) THEN
        dxelmm(1:nchmat) = 0.0
        dyelmm(1:nchmat) = 0.0
        dzelmm(1:nchmat) = 0.0
    END IF

    maxic = natfmo
    IF (mdwpbc/=0) THEN
        maxic = natfmo*(1+nimgcell)
    END IF

!   SETATZ allocates memory. One should be careful in returining it.
    CALL setatz(1,maxic,fastvesp,lfvesp,needfv)

    nqmmatm = 0
    IF (lcphf) CALL getmmchg(nqmmatm,dum)

!   temporary storage for 1e gradient
!   not sure about `NAT` in FMO
    ALLOCATE(de_priv(3,MXATM))
    ALLOCATE(de_fmox(3,natfmo))
    ALLOCATE(de_fmoxx(3,natfmo))
    de_priv = 0.0
    de_fmox = 0.0
    de_fmoxx = 0.0

!$omp parallel &
!$omp   private( &
!$omp       ii, jj, ic, &
!$omp       shi, shj, cntp, &
!$omp       dij, dernuc, cxyz, znuc, &
!$omp       icind, fracv, fracesp, &
!$omp       iaz, daxv, daxesp, daxxv, daxxesp, &
!$omp       de1, fmodex1, fmodexx1 &
!$omp   ) &
!$omp   firstprivate( &
!$omp       mine, ipcount, next &
!$omp   ) &
!$omp   reduction(+:de_fmox, de_fmoxx, de_priv)

    CALL cntp%alloc

!$omp do schedule(dynamic)
!   I shell
    DO ii = 1, nosp_basis%nshell

        CALL shi%fetch_by_id(ii)
        iaz = transfer(x(liaglob+shi%atid-1),1)
        dernuc = 0.0
        de1 = 0.0
        fmodex1 = 0.0
        fmodexx1 = 0.0

!       J shell
        DO jj = 1, nosp_basis%nshell

!           Go parallel!
            IF (goparr) THEN
                IF (mod(jj,nproc)/=me) CYCLE
            END IF

            CALL shj%fetch_by_id(jj)

            CALL cntp%shell_pair(shi, shj, tol, dup=.false.)
            IF (cntp%numpairs==0) CYCLE

            CALL density_unordered(shi, shj, dij, denab)

!           Kinetic energy
            IF (lcphf) CALL comp_kinetic_der1(cntp, dij, de1)


            nroots = (shi%ang+shj%ang-1)/2 + 1

!           Nuclear attraction
            DO ic = 1, maxic
                IF (fastvesp) THEN
                    icind = lfvesp+(ic-1)*6
                    fracv   = x(icind)
                    fracesp = x(icind+1)
                    znuc    = x(icind+2)
                    cxyz    = x(icind+3:icind+5)
                ELSE
                    CALL fmoatfrg(ic,x(lindat),x(lindatg),x(liaglob), &
                                x(lialoc),x(liabdfg),x(ljabdfg), &
                                x(lindbd),x(lfmozan),x(lfmoc), &
                                natfmo+nbdfg,x(luntxyz),x(lpopmat), &
                                shi%atid,shj%atid,fracv,fracesp, &
                                kfg,znuc,cxyz(1),cxyz(2),cxyz(3))
                END IF

                IF (fracesp==ZERO.AND.fracv==ZERO) CYCLE
                IF (.NOT.lcphf.AND.fracesp==ZERO) CYCLE

                CALL comp_coulomb_der1(cntp, cxyz, znuc, dij, dernuc)

                daxesp  = dax  * fracesp
                daxxesp = daxx * fracesp
                daxv    = dax  * fracv
                daxxv   = daxx * fracv

                IF (idax/=0) THEN
                    fmodex1  = fmodex1  + daxesp * dernuc
                    IF (lcphf) fmodex1  = fmodex1  + daxv * dernuc
                END IF
                IF (idaxx/=0) THEN
                    fmodexx1 = fmodexx1 + daxxesp * dernuc
                    IF (lcphf) fmodexx1 = fmodexx1 + daxxv * dernuc
                END IF
            END DO

            IF (lcphf.AND.fastvesp.AND.nqmmatm/=0) THEN
                DO ic = 1, nqmmatm
                    icind   =  lfvesp+maxic*6 + (ic-1)*4
                    cxyz    =  x(icind:icind+2)
                    znuc    = -x(icind+3)

                    CALL comp_coulomb_der1(cntp, cxyz, znuc, dij, dernuc)

                    IF (idax/=0) fmodex1  = fmodex1  + dax*dernuc
                    IF (idaxx/=0) fmodexx1 = fmodexx1 + daxx*dernuc
                END DO
            END IF


            IF (dbg) THEN
               WRITE(iw,'(1X,"TVDER: SHELLS II,JJ=",2I5)') ii,jj
               CALL egout(de,nat)
            END IF

        END DO

        IF (lcphf) THEN
            de_priv(:,shi%atid) = de_priv(:,shi%atid) + de1
        END IF

        IF (idax/=0)  THEN
            de_fmox(:,iaz)  = de_fmox(:,iaz)  + fmodex1  !Z ioff = lfmode+(iaz-1)*3
        END IF

        IF (idaxx/=0) THEN
            de_fmoxx(:,iaz) = de_fmoxx(:,iaz) + fmodexx1 !Z ioff = lfmode+3*natfmo+(iaz-1)*3
        END IF

    END DO
!$omp end do
!   End of shell loops
!$omp end parallel

    IF (lcphf) de = de + de_priv
    IF (idax/=0)  fmodex(:,1:natfmo)  = fmodex(:,1:natfmo)  + de_fmox
    IF (idaxx/=0) fmodexx(:,1:natfmo) = fmodexx(:,1:natfmo) + de_fmoxx

    DEALLOCATE(de_priv)
    DEALLOCATE(de_fmox)
    DEALLOCATE(de_fmoxx)

    IF (fastvesp) CALL retfm(needfv)


    IF (out) THEN
        IF (goparr) CALL ddi_gsumf(1503,de,3*nat)
        IF (maswrk) THEN
           WRITE(iw,'(/10X,38(1H-)/10X,"GRADIENT INCLUDING AO DERIVATIVE TERMS"/10X,38(1H-))')
           CALL egout(de,nat)
        END IF
        IF (goparr) de(:,:nat) = de(:,:nat)/nproc
!       Will only print partial contributions in parallel.
!ZCZ    IF (esd) THEN
        IF (.TRUE.) THEN
           IF (maswrk) WRITE(iw,'(/10X,36(1H-)/10X,"ONE-ELECTRON ESD GRADIENT",/10X,36(1H-))')
           CALL egout(x(lfmode+3*natfmo),natfmo)
        END IF
    END IF
!ZCZ FOR DEBUG
    IF (dbg) THEN
        IF (maswrk) THEN
            WRITE(iw,'(/10X,36(1H-)/10X,"ONE-ELECTRON ESD GRADIENT",/10X,36(1H-))')
            WRITE(iw,*) 'NATNAT', nat
        END IF
        CALL egout(x(lfmode),natfmo*nbody)
    END IF
!ZCZ

    IF (norm) THEN
        CALL bas_denorm_matrix(denab, nosp_basis%bfnrm, l1)
    END IF

 END SUBROUTINE

!-------------------------------------------------------------------------------

!> @brief Hellmann-Feynman force
!> @details Compute derivative contributions due to the Hamiltonian
!>   operator change w.r.t. shifts of nuclei. The contribution
!>   of the form <i|V'|j> is evaluated by Gauss-Rys quadrature.
!>   This version handles spdfg and L shells.
!> @note No relativistic methods available
!> @note I'm absolutely unaware what `FMODEX` and `FMODEXX` arrays are for. Someone
!>  should update their description.
!
!> @author Vladimir Mironov
!
!   REVISION HISTORY:
!> @date _Sep, 2018_ Initial release
!>
!> @param[in]       idax    scaling factor for `FMODEX`
!> @param[in]       idaxx   scaling factor for `FMODEXX`
!> @param[in,out]   denab   density matrix in packed format, remains unchanged on return
!> @param[in]       l2      dimension of density matrix array
!> @param[in,out]   fmodex  array with gradient contribution scaled by `IDAX`
!> @param[in,out]   fmodexx array with gradient contribution scaled by `IDAXX`
!> @param[in]       lcphf   flag for CPHF calculation
 SUBROUTINE omp_exthelfey(idax,idaxx,denab,l2,fmodex,fmodexx,lcphf)

    USE omp_lib, ONLY: omp_get_max_threads
    INTEGER, PARAMETER :: mxchrm = 1

    REAL(KIND=fp), PARAMETER :: &
        DBUGME = transfer('HELFEY  ',1.0_fp)


    REAL(KIND=fp), INTENT(INOUT) :: denab(:)
    INTEGER, INTENT(IN) :: l2, idax, idaxx
    LOGICAL, INTENT(IN) :: lcphf
    REAL(KIND=fp), INTENT(INOUT) :: fmodex(3,*), fmodexx(3,*)

    COMMON /FMCOM / x(1)
      REAL(KIND=fp) :: x

    COMMON /FMOINF/ nfg,nlayer,natfmo,nbdfg,naotyp,nbody
      INTEGER :: nfg,nlayer,natfmo,nbdfg,naotyp,nbody

    COMMON /FMOPMD/ fmobox(3),mdwpbc,nimgcell,imglvl, &
                    ltrvec,lfmogctr,lfmoctmp,lindatmd,lwrkdsav,lindxiu, &
                    ipbcfst
        REAL(KIND=fp) :: fmobox
        INTEGER :: mdwpbc,nimgcell,imglvl,ltrvec,lfmogctr,lfmoctmp, &
            lindatmd,lwrkdsav,lindxiu,ipbcfst

    COMMON /FMOPNT/ lichfg,lmulfg,lidmrec,lfrgnam,llayfrg,lindat, &
                    lncbs,lfmozan,lfmoc,lfmomas,lizbas,liaglob,libdgh, &
                    liabdfg,ljabdfg,lncao,lidxcao,liaprjo,ljaprjo, &
                    lcoreao,locccor,lshiftb,liodfmo,lfmoda,lfmodb, &
                    lfmoespa,lfmoespb,llocfmo,lscffrg,lfmoscf,lrij, &
                    lpopmul,lpopmat,lialoc,lindbd,liatfrg,lindfrg, &
                    lindgfrg,lnatfrg,lnat0frg,lianfrg,lzanfrg,lcfrg, &
                    llibish,llibnsh,llibng,lindatg,lfmobuf(3),lfmode, &
                    lnumfrg,lloctat,liaoglob,lloadm,lfmoge,ldgrid, &
                    liodcfmo,ljob2grp,lfmopg,lemocdr,luntxyz,luntrot, &
                    lstonep,lmapsu,lfrgmul,lclmo,lialmo,lindlmo, &
                    latclmo,llmobdf,lfgflmo,lnfglmo,llfglmo,lpfglmo, &
                    lpopdmat,lidmpnt,liddpnt,livmpnt,liactfg,lcrfrg, &
                    lzlmfrgv,lylmfrgv,lndtfrg,lf_mm,lg_mm,lmaxl30
      INTEGER :: lichfg,lmulfg,lidmrec,lfrgnam,llayfrg,lindat, &
          lncbs,lfmozan,lfmoc,lfmomas,lizbas,liaglob,libdgh, &
          liabdfg,ljabdfg,lncao,lidxcao,liaprjo,ljaprjo, &
          lcoreao,locccor,lshiftb,liodfmo,lfmoda,lfmodb, &
          lfmoespa,lfmoespb,llocfmo,lscffrg,lfmoscf,lrij, &
          lpopmul,lpopmat,lialoc,lindbd,liatfrg,lindfrg, &
          lindgfrg,lnatfrg,lnat0frg,lianfrg,lzanfrg,lcfrg, &
          llibish,llibnsh,llibng,lindatg,lfmobuf,lfmode, &
          lnumfrg,lloctat,liaoglob,lloadm,lfmoge,ldgrid, &
          liodcfmo,ljob2grp,lfmopg,lemocdr,luntxyz,luntrot, &
          lstonep,lmapsu,lfrgmul,lclmo,lialmo,lindlmo, &
          latclmo,llmobdf,lfgflmo,lnfglmo,llfglmo,lpfglmo, &
          lpopdmat,lidmpnt,liddpnt,livmpnt,liactfg,lcrfrg, &
          lzlmfrgv,lylmfrgv,lndtfrg,lf_mm,lg_mm,lmaxl30

    COMMON /GRAD  / de(3,MXATM)
        REAL(KIND=fp) :: de
!$omp threadprivate(/GRAD  /)

    COMMON /INFOA / nat,ich,mul,num,nqmt,ne,na,nb, &
                    zan(mxatm),c(3,mxatm),ian(mxatm)
      INTEGER :: nat,ich,mul,num,nqmt,ne,na,nb,ian
      REAL(KIND=fp) :: zan,c

    COMMON /IOFILE/ ir,iw,ip,ijk,ipk,idaf,nav,ioda(950)
      INTEGER :: ir,iw,ip,ijk,ipk,idaf,nav,ioda

    COMMON /OUTPUT/ nprint,itol,icut,normf,normp,nopk
      INTEGER :: nprint,itol,icut,normf,normp,nopk

    COMMON /PAR   / me,master,nproc,ibtyp,iptim,goparr,dskwrk,maswrk
      INTEGER :: me,master,nproc,ibtyp,iptim
      LOGICAL :: goparr,dskwrk,maswrk

    COMMON /RUNOPT/ runtyp,exetyp,nevals,nglevl,nhlevl
      REAL(KIND=fp) :: runtyp,exetyp
      INTEGER :: nevals,nglevl,nhlevl

    COMMON /ROOT  / xx,u(13),w(13),nroots
      REAL(KIND=fp) :: xx,u,w
      INTEGER :: nroots
!$omp threadprivate(/ROOT  /)

    INTEGER :: &
        ipcount, next, mine, maxic, icell, lfvesp, needfv, &
        ii, jj, ic, icind, kfg

    REAL(KIND=fp) :: tol, fracv, fracesp, &
        znuc, daxv, dax, daxx, daxesp, daxxv, daxxesp

    REAL(KIND=fp) :: dij(225), dernuc(3), cxyz(3)
    LOGICAL :: out, dbg, norm, nxt, fastvesp

    TYPE(shell_t) :: shi, shj
    TYPE(shpair_t) :: cntp

    INTEGER :: l1, max_threads

    dbg = (exetyp==DEBUG .OR. exetyp==DBUGME) .AND. maswrk
    out = (exetyp==DEBUG .OR. exetyp==DBUGME .OR. exetyp==GRD1 .OR. nprint==-3)

    IF (dbg) WRITE(iw,'(/10X,22("-")/10X,"HELLMANN-FEYNMAN FORCE"/10X,22("-"))')

    !IF (maswrk) write(iw,'("OMP FMO HELFEY GRD",2I10,L10,/,2I10)') idax, idaxx, lcphf, nosp_basis%nshell, natfmo

    CALL prepQuadGaussHermite
    !CALL split_sp_basis

    dax  = REAL(idax,  KIND=fp)
    daxx = REAL(idaxx, KIND=fp)

    tol = RLN10*itol
    norm = normf /= 1 .OR. normp /= 1

    IF (norm) THEN
        l1 = floor(sqrt(2.0*l2))
        CALL bas_norm_matrix(denab, nosp_basis%bfnrm, l1)
    END IF

    maxic = natfmo
    IF (mdwpbc/=0) THEN
        maxic = natfmo*(1+nimgcell)
    END IF

!   SETATZ allocates memory. One should be careful in returining it.
    CALL setatz(1,maxic,fastvesp,lfvesp,needfv)

!   Initialize parallel
    nxt = ibtyp==1
    !ipcount = me - 1
    next = -1
    mine = -1

    max_threads = omp_get_max_threads()

!$omp parallel &
!$omp   num_threads(min(max_threads, maxic)) &
!$omp   private( &
!$omp       ii, jj, ic, icell, &
!$omp       mine, ipcount, next, &
!$omp       shi, shj, cntp, &
!$omp       dij, dernuc, &
!$omp       cxyz, znuc, icind, fracv, fracesp, &
!$omp       daxv, daxesp, daxxv, daxxesp &
!$omp   )

    ipcount = 0
    CALL cntp%alloc

!   I shell
    DO ii = 1, nosp_basis%nshell

        DO icell = 0, nimgcell

!        IF (mod((ii-1)*(nimgcell+1)+icell+1,nproc)/=me) CYCLE
!       J shell
        DO jj = 1, ii

!           Go parallel!
            IF (goparr) THEN
                ipcount = ipcount + 1
                IF (mod(ipcount,nproc)/=me) CYCLE
            END IF

            CALL shi%fetch_by_id(ii)

            CALL shj%fetch_by_id(jj)

            CALL cntp%shell_pair(shi, shj, tol)
            IF (cntp%numpairs==0) CYCLE

            nroots = (shi%ang+shj%ang-1)/2 + 1

            CALL density_ordered(shi, shj, dij, denab)

!           Hellmann-Feynman term
!ZCZ        HelFey terms for FMO ESP used to be calculated in ES1DER
!ZCZ        in the new version, however, HELFEY terms are calculated here
!ZCZ        besides, ESD fraction is calculated here utilizing FMOATFRG
!$omp do schedule(dynamic)
!atoms:      DO ic = 1, maxic
atoms:      DO ic = 1, natfmo
                IF (fastvesp) THEN
                    icind = lfvesp+(ic+(icell*natfmo)-1)*6
                    fracv   = x(icind)
                    fracesp = x(icind+1)
                    znuc    = x(icind+2)
                    cxyz    = x(icind+3:icind+5)
                ELSE
                    CALL fmoatfrg(ic+icell*natfmo,x(lindat),x(lindatg),x(liaglob), &
                                x(lialoc),x(liabdfg),x(ljabdfg), &
                                x(lindbd),x(lfmozan),x(lfmoc), &
                                natfmo+nbdfg,x(luntxyz),x(lpopmat), &
                                shi%atid,shj%atid,fracv,fracesp, &
                                kfg,znuc,cxyz(1),cxyz(2),cxyz(3))
                END IF

                IF (fracesp==ZERO.AND.fracv==ZERO) CYCLE
                IF (.NOT.lcphf.AND.fracesp==ZERO) CYCLE

                !IF (mdwpbc/=0.AND.ic>natfmo) icc = modulo(ic-1,natfmo)+1

                CALL comp_coulomb_helfeyder1(cntp, cxyz, znuc, dij, dernuc)

                daxesp  = dax  * fracesp
                daxv    = dax  * fracv
                daxxesp = daxx * fracesp
                daxxv   = daxx * fracv

                IF (idax/=0)  THEN
                    IF (lcphf) THEN
                        fmodex(:,ic) = fmodex(:,ic)  + (daxesp+daxv)*dernuc
                    ELSE
                        fmodex(:,ic) = fmodex(:,ic)  + daxesp*dernuc
                    END IF
                END IF

                IF (idaxx/=0) THEN
                    IF (lcphf) THEN
                        fmodexx(:,ic) = fmodexx(:,ic) + (daxxesp+daxxv)*dernuc
                    ELSE
                        fmodexx(:,ic) = fmodexx(:,ic) + daxxesp*dernuc
                    END IF
                END IF

            END DO atoms
!$omp end do

            IF (dbg) THEN
               WRITE(iw,'(1X,"HELFEY: SHELLS II,JJ=",2I5)') ii,jj
               CALL egout(de,nat)
            END IF

        END DO
        END DO
    END DO
!   End of shell loops
!$omp end parallel

    IF (fastvesp) CALL retfm(needfv)

    IF (out) THEN
        IF (goparr) CALL ddi_gsumf(1503,de,3*nat)
        IF (maswrk) THEN
           WRITE(iw,'(/10X,22(1H-)/10X,"HELLMANN-FEYNMAN FORCE"/10X,22(1H-))')
           CALL egout(de,nat)
        END IF
        IF (goparr) de(1:3,1:nat) = de(1:3,1:nat)/nproc

    END IF

    IF (goparr.AND.nxt) CALL ddi_dlbreset

    IF (norm) THEN
        CALL bas_denorm_matrix(denab, nosp_basis%bfnrm, l1)
    END IF

 END SUBROUTINE

 END MODULE
